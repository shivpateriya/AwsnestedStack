AWSTemplateFormatVersion: "2010-09-09"

Description: AWS CloudFormation workshop - Nested stacks - EC2 template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Amazon EC2 Configuration'
        Parameters:
          - AmiID

    ParameterLabels:
      AmiID:
        default: 'Amazon Machine Image ID'

Parameters:
  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: Test
    AllowedValues:
      - Dev
      - Test
      - Prod
    ConstraintDescription: 'Specify either Dev, Test or Prod.'
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'The VPC ID'

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'  

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  # 1. Add VpcId and SubnetId parameter from "1. Prepare the security group resource" here

  # 2. Add WebServerInstanceProfile parameter from "5. Prepare the EC2 template" here

Mappings:
  EnvironmentToInstanceType:
    Dev:
      InstanceType: t2.nano
    Test:
      InstanceType: t2.micro
    Prod:
      InstanceType: t2.small

Resources:
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ssh-sg
      GroupDescription: Security group for SSH access
      VpcId: !Ref VpcId    
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId



  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref SubnetId
      # IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref AmiID
      KeyName: nginx
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref EnvironmentType, Web Server ] ]


  WebServerInstance2:
      Type: AWS::EC2::Instance
      Properties:
        SubnetId: !Ref SubnetId
        # IamInstanceProfile: !Ref WebServerInstanceProfile
        ImageId: !Ref AmiID
        InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        Tags:
          - Key: Name
            Value: !Join [ ' ', [ !Ref EnvironmentType, Web Server ] ]




      # 2. Add 'VpcId' property from "1. Prepare the security group resource" here

  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance

Outputs:
  WebServerPublicDNS:
    Description: 'Public DNS of EC2 instance'
    Value: !GetAtt WebServerInstance.PublicDnsName

  # WebServerElasticIP:
  #   Description: Elastic IP associated with the web server EC2 instance
  #   Value: !Ref WebServerEIP

  # WebsiteURL:
  #   Value: !Sub http://${WebServerEIP}
  #   Description: Application URL

  WebServerSecurityGroup:
        Export: 
        Description: 'Public DNS of EC2 instance'
        Value: !Ref WebServerSecurityGroup
